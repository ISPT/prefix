---
--- prefix_range datatype installation
---
BEGIN;

DROP TYPE IF EXISTS prefix_range CASCADE;

CREATE OR REPLACE FUNCTION prefix_range_in(cstring)
RETURNS prefix_range
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_out(prefix_range)
RETURNS cstring
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE TYPE prefix_range (
	INPUT = prefix_range_in,
	OUTPUT = prefix_range_out
);
COMMENT ON TYPE prefix_range IS 'prefix range: (prefix)?([a-b])?';

CREATE OR REPLACE FUNCTION prefix_range(text)
RETURNS prefix_range
AS 'MODULE_PATHNAME', 'prefix_range_cast_from_text'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION text(prefix_range)
RETURNS text
AS 'MODULE_PATHNAME', 'prefix_range_cast_to_text'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE CAST (text as prefix_range) WITH FUNCTION prefix_range(text);
CREATE CAST (prefix_range as text) WITH FUNCTION text(prefix_range);


CREATE OR REPLACE FUNCTION prefix_range_eq(prefix_range, prefix_range)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_neq(prefix_range, prefix_range)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_lt(prefix_range, prefix_range)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_le(prefix_range, prefix_range)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_gt(prefix_range, prefix_range)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_ge(prefix_range, prefix_range)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_cmp(prefix_range, prefix_range)
RETURNS integer
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_overlaps(prefix_range, prefix_range)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_contains(prefix_range, prefix_range)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_contains_strict(prefix_range, prefix_range)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_contained_by(prefix_range, prefix_range)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_contained_by_strict(prefix_range, prefix_range)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_contains_prefix(prefix_range, text)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_range_contained_by_prefix(text, prefix_range)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

DROP OPERATOR IF EXISTS <<(prefix_range, prefix_range) CASCADE;
CREATE OPERATOR << (
	LEFTARG = prefix_range,
	RIGHTARG = prefix_range,
	PROCEDURE = prefix_range_contained_by_strict,
	COMMUTATOR = '>>',
	RESTRICT = contsel,
	JOIN = contjoinsel
);
COMMENT ON OPERATOR <<(prefix_range, prefix_range) IS 'contained by strict?';

DROP OPERATOR IF EXISTS <<=(prefix_range, prefix_range) CASCADE;
CREATE OPERATOR <<= (
	LEFTARG = prefix_range,
	RIGHTARG = prefix_range,
	PROCEDURE = prefix_range_contained_by,
	COMMUTATOR = '>>=',
	RESTRICT = contsel,
	JOIN = contjoinsel
);
COMMENT ON OPERATOR <<=(prefix_range, prefix_range) IS 'contained by?';

DROP OPERATOR IF EXISTS &&(prefix_range, prefix_range) CASCADE;
CREATE OPERATOR && (
	LEFTARG = prefix_range,
	RIGHTARG = prefix_range,
	PROCEDURE = prefix_range_overlaps,
	COMMUTATOR = '&&',
	RESTRICT = areasel,
	JOIN = areajoinsel
);
COMMENT ON OPERATOR &&(prefix_range, prefix_range) IS 'overlaps?';

DROP OPERATOR IF EXISTS >>(prefix_range, prefix_range) CASCADE;
CREATE OPERATOR >> (
	LEFTARG = prefix_range,
	RIGHTARG = prefix_range,
	PROCEDURE = prefix_range_contains_strict,
	COMMUTATOR = '<<',
	RESTRICT = contsel,
	JOIN = contjoinsel
);
COMMENT ON OPERATOR >>(prefix_range, prefix_range) IS 'contains strict?';

DROP OPERATOR IF EXISTS >>=(prefix_range, prefix_range) CASCADE;
CREATE OPERATOR >>= (
	LEFTARG = prefix_range,
	RIGHTARG = prefix_range,
	PROCEDURE = prefix_range_contains,
	COMMUTATOR = '<<=',
	RESTRICT = contsel,
	JOIN = contjoinsel
);
COMMENT ON OPERATOR >>=(prefix_range, prefix_range) IS 'contains?';

DROP OPERATOR IF EXISTS =(prefix_range, prefix_range) CASCADE;
CREATE OPERATOR = (
	LEFTARG = prefix_range,
	RIGHTARG = prefix_range,
	PROCEDURE = prefix_range_eq,
	COMMUTATOR = '=',
	NEGATOR = '<>',
	RESTRICT = eqsel,
	JOIN = eqjoinsel
);
COMMENT ON OPERATOR >>=(prefix_range, prefix_range) IS 'equals?';

DROP OPERATOR IF EXISTS <>(prefix_range, prefix_range) CASCADE;
CREATE OPERATOR <> (
	LEFTARG = prefix_range,
	RIGHTARG = prefix_range,
	PROCEDURE = prefix_range_neq,
	COMMUTATOR = '<>',
	NEGATOR = '=',
	RESTRICT = neqsel,
	JOIN = neqjoinsel
);
COMMENT ON OPERATOR >>=(prefix_range, prefix_range) IS 'not equals?';

DROP OPERATOR IF EXISTS <(prefix_range, prefix_range) CASCADE;
CREATE OPERATOR < (
	LEFTARG = prefix_range,
	RIGHTARG = prefix_range,
	PROCEDURE = prefix_range_lt
);
COMMENT ON OPERATOR <(prefix_range, prefix_range) IS 'less-than';

DROP OPERATOR IF EXISTS <=(prefix_range, prefix_range) CASCADE;
CREATE OPERATOR <= (
	LEFTARG = prefix_range,
	RIGHTARG = prefix_range,
	PROCEDURE = prefix_range_le
);
COMMENT ON OPERATOR <=(prefix_range, prefix_range) IS 'less-than-or-equal';

DROP OPERATOR IF EXISTS >(prefix_range, prefix_range) CASCADE;
CREATE OPERATOR > (
	LEFTARG = prefix_range,
	RIGHTARG = prefix_range,
	PROCEDURE = prefix_range_gt
);
COMMENT ON OPERATOR >(prefix_range, prefix_range) IS 'greater-than';

DROP OPERATOR IF EXISTS >=(prefix_range, prefix_range) CASCADE;
CREATE OPERATOR >= (
	LEFTARG = prefix_range,
	RIGHTARG = prefix_range,
	PROCEDURE = prefix_range_ge
);
COMMENT ON OPERATOR >=(prefix_range, prefix_range) IS 'greater-than-or-equal';

DROP OPERATOR IF EXISTS @>(prefix_range, text) CASCADE;
CREATE OPERATOR @> (
	LEFTARG = prefix_range,
	RIGHTARG = text,
	PROCEDURE = prefix_range_contains_prefix,
	COMMUTATOR = '<@'
);
COMMENT ON OPERATOR @>(prefix_range, text) IS 'prefix_range contains query?';

DROP OPERATOR IF EXISTS <@(text, prefix_range) CASCADE;
CREATE OPERATOR <@ (
	LEFTARG = text,
	RIGHTARG = prefix_range,
	PROCEDURE = prefix_range_contained_by_prefix,
	COMMUTATOR = '@>'
);
COMMENT ON OPERATOR <@(text, prefix_range) IS 'prefix_range is contained by query?';


CREATE OPERATOR CLASS btree_prefix_range_ops
DEFAULT FOR TYPE prefix_range USING btree
AS
	OPERATOR	1	< ,
	OPERATOR	2	<= ,
	OPERATOR	3	= ,
	OPERATOR	4	>= ,
	OPERATOR	5	> ,
	FUNCTION	1	prefix_range_cmp(prefix_range, prefix_range);

COMMIT;


---
--- prefix opclass installation
---
BEGIN;

CREATE OR REPLACE FUNCTION prefix_contains(text, text)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION prefix_contained_by(text, text)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

DROP OPERATOR IF EXISTS @>(text, text) CASCADE;
CREATE OPERATOR @> (
	LEFTARG = text,
	RIGHTARG = text,
	PROCEDURE = prefix_contains,
	COMMUTATOR = '<@'
);
COMMENT ON OPERATOR @>(text, text) IS 'prefix contains query?';

DROP OPERATOR IF EXISTS <@(text, text) CASCADE;
CREATE OPERATOR <@ (
	LEFTARG = text,
	RIGHTARG = text,
	PROCEDURE = prefix_contained_by,
	COMMUTATOR = '@>'
);
COMMENT ON OPERATOR <@(text, text) IS 'query is contained by prefix?';

--
-- greatest prefix aggregate
--
CREATE OR REPLACE FUNCTION greater_prefix(text, text)
RETURNS text
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

DROP AGGREGATE IF EXISTS greater_prefix(text);
CREATE AGGREGATE greater_prefix(text) (
       SFUNC = greater_prefix,
       STYPE = text
);
COMMENT ON AGGREGATE greater_prefix(text) IS 'greater prefix aggregate';

--
-- prefix penalty, for testing purpose
--
CREATE OR REPLACE FUNCTION prefix_penalty(text, text)
RETURNS float
AS 'MODULE_PATHNAME'
LANGUAGE 'C' IMMUTABLE STRICT;

--
-- define the GiST support methods
--

CREATE OR REPLACE FUNCTION gprefix_consistent(internal, text, text)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE 'C';

CREATE OR REPLACE FUNCTION gprefix_compress(internal)
RETURNS internal 
AS 'MODULE_PATHNAME'
LANGUAGE 'C';

CREATE OR REPLACE FUNCTION gprefix_decompress(internal)
RETURNS internal 
AS 'MODULE_PATHNAME'
LANGUAGE 'C';

CREATE OR REPLACE FUNCTION gprefix_penalty(internal, internal, internal)
RETURNS internal
AS 'MODULE_PATHNAME'
LANGUAGE 'C' STRICT;

CREATE OR REPLACE FUNCTION gprefix_picksplit(internal, internal)
RETURNS internal
AS 'MODULE_PATHNAME'
LANGUAGE 'C';

CREATE OR REPLACE FUNCTION gprefix_union(internal, internal)
RETURNS text
AS 'MODULE_PATHNAME'
LANGUAGE 'C';

CREATE OR REPLACE FUNCTION gprefix_same(text, text, internal)
RETURNS internal 
AS 'MODULE_PATHNAME'
LANGUAGE 'C';

CREATE OPERATOR CLASS gist_prefix_ops
FOR TYPE text USING gist 
AS
	OPERATOR	1	@>,
	FUNCTION	1	gprefix_consistent (internal, text, text),
	FUNCTION	2	gprefix_union (internal, internal),
	FUNCTION	3	gprefix_compress (internal),
	FUNCTION	4	gprefix_decompress (internal),
	FUNCTION	5	gprefix_penalty (internal, internal, internal),
	FUNCTION	6	gprefix_picksplit (internal, internal),
	FUNCTION	7	gprefix_same (text, text, internal);

COMMIT;